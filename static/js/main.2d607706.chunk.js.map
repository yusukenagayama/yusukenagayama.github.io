{"version":3,"sources":["views/commponents/tweet.jsx","views/commponents/Timeline.jsx","views/commponents/TweetInput.jsx","App.js","reportWebVitals.js","index.js"],"names":["Tweet","props","React","useState","liked","setLiked","className","icon","display","accountName","content","onClick","Timeline","tweetList","tweets","map","tw","Key","id","displayName","TweetInput","textareaRef","useRef","sendTweet","useCallback","current","value","addTweet","Date","getTime","ref","App","setTweets","tweet","prev","useEffect","getAxiosDemo","a","axios","get","res","console","log","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPA6BeA,EA1BD,SAACC,GAEX,MAA0BC,IAAMC,UAAS,GAAzC,mBAAOC,EAAP,KAAcC,EAAd,KAMF,OACE,sBAAKC,UAAU,QAAf,UACE,qBAAKA,UAAU,iBAAf,SAAkCL,EAAMM,OACxC,sBAAKD,UAAU,iBAAf,UACG,sBAAKA,UAAU,iBAAf,UACI,sBAAMA,UAAU,cAAhB,SAAgCL,EAAMO,UACtC,uBAAMF,UAAU,cAAhB,cAAiCL,EAAMQ,kBAExC,qBAAKH,UAAU,UAAf,SAA2BL,EAAMS,UACjC,qBAAKJ,UAAU,cAAf,SACI,sBAAMK,QAdC,WACfN,GAAU,kBAAOD,MAaT,SAA6BA,EAAQ,eAAO,oBCG7CQ,EAtBE,SAACX,GACd,IAAMY,EAAYZ,EAAMa,OAAOC,KAAI,SAACC,GAEpC,OACI,mCACA,cAAC,EAAD,CACIC,IAAKD,EAAGE,GACRX,KAAMS,EAAGT,KACTY,YAAaH,EAAGG,YAChBV,YAAaO,EAAGP,YAChBC,QAASM,EAAGN,eAMxB,OACI,qBAAKJ,UAAU,WAAf,SAA4BO,KCcjBO,EA/BI,SAACnB,GAEhB,IAAMoB,EAAcnB,IAAMoB,OAAO,MAE3BC,EAAYrB,IAAMsB,aAAY,WAChC,GAAIH,EAAYI,QAAS,CACrB,GAAiC,IAA7BJ,EAAYI,QAAQC,MAAa,OACrCzB,EAAM0B,SAAS,CACXT,IAAI,IAAIU,MAAOC,UACftB,KAAM,eACNY,YAAa,2BACbV,YAAa,UACbC,QAASW,EAAYI,QAAQC,QAGrCL,EAAYI,QAAQC,MAAQ,OAC7B,CAACL,EAAYI,QAASxB,EAAM0B,WAE/B,OACI,sBAAKrB,UAAU,cAAf,UACI,8BACI,0BAAUA,UAAU,iBAAiBwB,IAAMT,MAE/C,8BACI,wBAAQf,UAAU,aAAaK,QAAUY,EAAzC,4CCiEDQ,EApFH,WAsDZ,MAAyB7B,IAAMC,SAAS,IAAxC,mBAAOW,EAAP,KAAckB,EAAd,KAGML,EAAWzB,IAAMsB,aAAY,SAACS,GAAD,OAAWD,GAAU,SAACE,GAAD,OAAWD,GAAX,mBAAqBC,SAAQ,CAACF,IAKtF9B,IAAMiC,WAAU,WACdC,MACA,IAKF,IAAMA,EAAY,uCAAG,4BAAAC,EAAA,sEACDC,IAAMC,IAAI,gEADT,OACbC,EADa,OAEnBC,QAAQC,IAAIF,GACZR,GAAU,kBAAMQ,EAAIG,QAHD,2CAAH,qDAOlB,OACE,gCACE,cAAC,EAAD,CAAYhB,SAAUA,IACtB,cAAC,EAAD,CAAUb,OAASA,QC1ER8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2d607706.chunk.js","sourcesContent":["import React from \"react\"; // 後で使う\n\n\nconst Tweet = (props) => { // porps後で使う\n\n    const [liked, setLiked] = React.useState(false);\n\n    const toggleLike = () =>{\n        setLiked( () => !liked );\n    }\n\n  return (\n    <div className=\"tweet\">\n      <div className=\"icon-container\">{ props.icon }</div>\n      <div className=\"body-container\">\n         <div className=\"status-display\">\n             <span className=\"displayName\">{ props.display }</span>\n             <span className=\"accountName\">@{ props.accountName }</span>\n            </div>\n            <div className=\"content\">{ props.content }</div>\n            <div className=\"status-icon\">\n                <span onClick={toggleLike}>{ liked ? \"⭐️\" : \"☆\" }</span> \n            </div>\n      </div>\n    </div>\n  )\n\n}\n\nexport default Tweet;","import Tweet from \"./tweet\";\n\nconst Timeline = (props) =>{\n    const tweetList = props.tweets.map((tw)  => {\n    \n    return(\n        <>\n        <Tweet\n            Key={tw.id}\n            icon={tw.icon}\n            displayName={tw.displayName}\n            accountName={tw.accountName}\n            content={tw.content}\n        />\n        </>\n    )\n});\n\nreturn (\n    <div className=\"timeline\">{ tweetList }</div>\n)\n}\n\n\nexport default Timeline;","import React from \"react\";\n\nconst TweetInput = (props) => {\n\n    const textareaRef = React.useRef(null);\n\n    const sendTweet = React.useCallback(() => {\n        if (textareaRef.current) {\n            if (textareaRef.current.value == \"\") return; // 空だったら実行しない\n            props.addTweet({\n                id: new Date().getTime(), // コンポーネントのidをuniqueに保つために時間をid にしておく（仮）\n                icon: \"🌙\",\n                displayName: \"となかい\",\n                accountName: \"kaitona\",\n                content: textareaRef.current.value\n            });\n        }\n        textareaRef.current.value = null; // 実行後は値をnullにする\n    }, [textareaRef.current, props.addTweet]);\n\n    return (\n        <div className=\"tweet-input\">\n            <div>\n                <textarea className=\"tweet-textarea\" ref={ textareaRef } ></textarea>\n            </div>\n            <div>\n                <button className=\"send-tweet\" onClick={ sendTweet }>ツイート</button>\n            </div>\n        </div>\n    )\n\n}\n\nexport default TweetInput;","\nimport React from \"react\"\nimport axios from \"axios\"\nimport './assets/css/style.css'\nimport Timeline from \"./views/commponents/Timeline\"\nimport TweetInput from \"./views/commponents/TweetInput\"\n\nconst App = () => {\n//   return (\n//     <>\n//     <Tweet \n//       icon=\"🌙\"\n//       displayName=\"となかい\"\n//       accountName=\"kaitona\"\n//       content=\"テスト書きaaaaaa\"\n//     />\n\n// <Tweet \n//       icon=\"🎅\"\n//       displayName=\"さんた\"\n//       accountName=\"satan\"\n//       content=\"ちゃんと読もうね\"\n//     />\n\n// <Tweet \n//       icon=\"餅\"\n//       displayName=\"もち\"\n//       accountName=\"moti\"\n//       content=\"文字もアイコンにできるんだね。\"\n//     />\n//   </>\n//   )\n\n// const tweets = [\n//   {\n//     id:1,\n//       icon:\"🌙\",\n//       displayName:\"となかい\",\n//       accountName:\"kaitona\",\n//       content:\"テスト書きaaaaaa\",\n//   },\n\n//   {\n//     id:2,\n//       icon:\"🎅\",\n//       displayName:\"さんた\",\n//       accountName:\"satan\",\n//       content:\"ちゃんと読もうね\",\n//   },\n\n\n//   {\n//     id:3,\n//       icon:\"餅\",\n//       displayName:\"もち\",\n//       accountName:\"moti\",\n//       content:\"文字もアイコンにできるんだね。\",\n//   },\n\n// ]\n\nconst [tweets,setTweets]=React.useState([]);\n\n// const addTweet = React.useCallback(因数1、因数2) [...]スプレッド構文\nconst addTweet = React.useCallback((tweet) => setTweets((prev) => [tweet, ...prev]), [setTweets]);\n\n//useEffectを使って最初の1回だけ実行する\n//第二因数の[]の中は、変化を監視したい関数を入れる。なければ空。\n// => その値が変化したら、再びuseeffect内の処理が呼び出される。\nReact.useEffect(()=>{\n  getAxiosDemo();\n},[])\n\n//非同期通信でAPIを叩いてデータを取得する\n//取得したデータをsetTweetsを使ってtweetsを更新する\n\nconst getAxiosDemo = async () => {\n  const res = await axios.get(\"https://run.mocky.io/v3/7b67e1a6-8b04-4e9d-8202-9fa533dab41d\")\n  console.log(res);\n  setTweets(() => res.data);\n}\n\n\nreturn(\n  <div>\n    <TweetInput addTweet={addTweet}/>\n    <Timeline tweets={ tweets} />\n  </div>\n)\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}